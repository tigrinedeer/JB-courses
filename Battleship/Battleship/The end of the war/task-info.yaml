type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/FieldState.java
  visible: true
  text: |
    package battleship;

    public enum FieldState {
        FOG_OF_WAR("~",0),
        MY_SHIP("O",1),
        HIT_SHIP("X", 2),
        MISSED_SHOT("M",3);

        String symbol;
        int value;

        FieldState(String smbl, int value) {
            symbol = smbl;
            this.value = value;
        }



    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import java.io.IOException;
    import java.util.Scanner;

    public class Field {

        private static final char[] COLUMN_NAMES ={'A','B','C','D','E','F','G','H','I','J'};
        private static final int FIELD_SIZE = 10;
        private int aliveShipPieces;
        FieldState[][] field;
        Ship[] ships;
        Scanner scanner;

        public Field(Scanner scanner) {
          field = new FieldState[FIELD_SIZE][FIELD_SIZE];
            for (int i = 0; i < FIELD_SIZE; i++) {
                for (int j = 0; j < FIELD_SIZE; j++) {
                    field[i][j] = FieldState.FOG_OF_WAR;
                }
            }
          ships = Ship.values();
          aliveShipPieces = 0;
          this.scanner = scanner;
        }

        public void setShips() {
            int x1 = 0,y1 = 0,x2 = 0,y2 = 0;
            boolean retry;
            for (Ship ship:ships) {
                System.out.println(String.format("Enter the coordinates of the %s (%d cells):", ship.name, ship.length));
                System.out.print("> ");
                do {
                    retry = false;
                    try {
                        try {
                            String str = scanner.nextLine();
                            String[] coors = str.split(" ");
                            y1 = convertCoordinateByLetter(coors[0].charAt(0));
                            x1 = validateXCoordinate(Integer.parseInt(coors[0].substring(1)) - 1);
                            y2 = convertCoordinateByLetter(coors[1].charAt(0));
                            x2 = validateXCoordinate(Integer.parseInt(coors[1].substring(1)) - 1);
                        } catch (IOException ex) {
                            System.out.println("Something went wrong in scanning new line");
                        }
                        catch (Exception e) {
                            throw new Exception("Error in coordinates!");
                        }

                        if ((x1 < x2) || (y1 < y2)) { setShip(ship, x1, y1, x2, y2);
                        } else { setShip(ship, x2, y2, x1, y1); }

                        print(false);
                    } catch (Exception e) {
                        System.out.println(e.getMessage() + " Try again:");
                        retry = true;
                    }
                } while (retry);
                aliveShipPieces += ship.length;
            }
        }

        private int convertCoordinateByLetter(char c) throws Exception {
            for (int i = 0; i < FIELD_SIZE; i++)
                if (COLUMN_NAMES[i] == c) { return i; }
            throw new Exception("Error! You entered the wrong coordinates!");
        }

        private int validateXCoordinate(int x) throws Exception {
            if ((x < 0) || (x >= FIELD_SIZE)) {
                throw new Exception("Error! You entered the wrong coordinates!");
            }
            return x;
        }

        private boolean setShip(Ship ship, int x1, int y1, int x2, int y2) throws Exception {
            //move horizontally
            if (y1==y2) {
                if (Math.abs(x2-x1) != ship.length-1) {
                    throw new Exception(String.format("Error! Wrong length of the %s!", ship.name));
                }
                checkArea(x1-1, x2+1, y1-1, y1+1);
                putShipToField(x1, y1, x2, y2);
                //or vertically
            } else if (x1==x2) {
                if (Math.abs(y2-y1) != ship.length-1) {
                    throw new Exception(String.format("Error! Wrong length of the %s!", ship.name));
                }
                checkArea(x1-1, x1+1, y1-1, y2+1);
                putShipToField(x1, y1, x2, y2);
            } else {
                throw new Exception("Error! Wrong ship location!");
            }
            return true;
        }

        private void putShipToField(int x1, int y1, int x2, int y2) {
            for (int i = ((x1 < 0) ? 0 : x1); i <= x2; i++ ){
                for (int j = ((y1 < 0) ? 0 : y1); j <= y2; j++ ) {
                    field[i][j]=FieldState.MY_SHIP;
                }
            }
        }

        private void checkArea(int x1, int x2, int y1, int y2) throws Exception {
            for (int i = ((x1 < 0) ? 0 : x1); i <= ((x2 > (FIELD_SIZE - 1)) ? (FIELD_SIZE - 1) : x2); i++ ){
                for (int j = ((y1 < 0) ? 0 : y1); j <= ((y2 > (FIELD_SIZE - 1)) ? (FIELD_SIZE - 1) : y2); j++ ) {
                    if (!checkCellIsAvailable(i, j)) {
                        throw new Exception("Error! You placed it too close to another one.");
                    }
                }
            }
        }

        private boolean checkCellIsAvailable(int x, int y) {
            return field[x][y] == FieldState.FOG_OF_WAR;
        }

        public void print(boolean hideShips) {
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int j = 0; j < FIELD_SIZE; j++) {
                System.out.print(COLUMN_NAMES[j]);
                for (int i = 0; i < FIELD_SIZE; i++) {

                    System.out.print(" " +
                            ((hideShips && field[i][j] == FieldState.MY_SHIP)
                                    ? FieldState.FOG_OF_WAR.symbol
                                    : field[i][j].symbol));
                }
                System.out.println();
            }
            System.out.println();
        }

        public void shoot() {
            boolean retry;
            print(true);
            do {
                retry = false;
                try {
                    System.out.println("Take a shot!");
                    System.out.print("> ");
                    String str = scanner.nextLine();
                    int y = convertCoordinateByLetter(str.charAt(0));
                    int x = validateXCoordinate(Integer.parseInt(str.substring(1)) - 1);
                    if (field[x][y] == FieldState.MY_SHIP) {
                        field[x][y] = FieldState.HIT_SHIP;
                        if (findAliveShipPiece(int x, int y)) {
                            System.out.println("You hit a ship!");
                        } else {
                            You sank a ship! Specify a new target:
                        }

                        aliveShipPieces -= 1;
                    } else {
                        field[x][y] = FieldState.MISSED_SHOT;
                        System.out.println("You missed!");
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage() + " Try again:");
                    retry = true;
                }
            } while (retry);
            print(false);
        }

        public boolean isAlive() {
            return (aliveShipPieces > 0);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/666/implement">JetBrains
    Academy</a>
  time: Thu, 13 May 2021 21:54:55 UTC
record: 4
